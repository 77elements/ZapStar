// js/ui.js
// Handles all DOM manipulation and UI updates.

import { nip19 } from 'https://esm.sh/nostr-tools@2.1.3';

export function showMainView() {
    document.getElementById('login-view').style.display = 'none';
    document.getElementById('main-view').style.display = 'block';
}

export function updateWelcomeMessage(message) {
    document.getElementById('welcome-message').textContent = message;
}

export function updateProgressBar(percentage, text = '') {
    const progressBar = document.getElementById('progress-bar');
    progressBar.style.width = `${percentage}%`;
    if (text) {
        progressBar.textContent = text;
    }
}

export function showProgressBar() {
    document.getElementById('progress-container').style.display = 'block';
}

export function hideProgressBar() {
    setTimeout(() => {
        document.getElementById('progress-container').style.display = 'none';
    }, 500);
}

export function showEditModal(content) {
    document.getElementById('note-editor').value = content;
    document.getElementById('edit-modal').style.display = 'flex';
}

export function hideEditModal() {
    document.getElementById('edit-modal').style.display = 'none';
}

function showShareButtons() {
    document.getElementById('share-buttons').style.display = 'flex';
}

function hideShareButtons() {
    document.getElementById('share-buttons').style.display = 'none';
}

function getProfileDisplayName(profileEvent) {
    if (!profileEvent) return null;
    try {
        const profileData = JSON.parse(profileEvent.content);
        const name = profileData.name;
        const displayName = profileData.display_name;

        if (displayName && name && displayName !== name) {
            return `${displayName} (${name})`;
        }
        return displayName || name || null;
    } catch (e) {
        return null;
    }
}

export function generatePostContent(zappers, profiles, withSats, totalSats) {
    const medal = ['🥇', '🥈', '🥉'];
    const heading = '🏆 My Top Zappers 🏆';
    const underline = '-'.repeat(Array.from(heading).length + 4);
    let content = `${heading}\n${underline}\n\n`;

    zappers.forEach((zapper, index) => {
        const profileEvent = profiles.get(zapper.pubkey);
        const displayName = getProfileDisplayName(profileEvent) || `nostr:${nip19.npubEncode(zapper.pubkey)}`;
        
        const prefix = medal[index] ? `${medal[index]} ` : `${index + 1}. `;
        content += `${prefix}${displayName}`;

        if (withSats) {
            content += ` ... ${zapper.totalSats.toLocaleString()} Sats`;
        }
        content += '\n';
    });

    if (withSats) {
        content += `\nTotal: ${totalSats.toLocaleString()} Sats`;
    }

    content += '\n\nGenerated by ZapStar💫 (https://mslmdvlpmnt.com/zapstar/)';
    return content;
}


export function renderZapperList(zappers, profiles, oldestTimestamp, totalSats) {
    const zapperList = document.getElementById('zapper-list');
    const listFooter = document.getElementById('list-footer');
    const heading = document.getElementById('zapper-list-heading');

    zapperList.innerHTML = '';
    listFooter.innerHTML = '';
    heading.classList.add('visually-hidden');
    hideShareButtons();

    if (zappers.length === 0) {
        zapperList.innerHTML = '<li>No zaps found yet.</li>';
        return;
    }

    heading.classList.remove('visually-hidden');
    zappers.forEach(zapper => {
        const li = document.createElement('li');
        const profileEvent = profiles.get(zapper.pubkey);
        const npub = nip19.npubEncode(zapper.pubkey);
        const finalDisplayName = getProfileDisplayName(profileEvent) || npub;
        let pictureUrl = null;

        if (profileEvent) {
            try {
                const profileData = JSON.parse(profileEvent.content);
                pictureUrl = profileData.picture;
            } catch (e) { /* Ignore */ }
        }

        // Profile Picture
        const img = document.createElement('img');
        img.className = 'profile-pic';
        img.src = pictureUrl || `https://api.dicebear.com/8.x/identicon/svg?seed=${zapper.pubkey}`; // Fallback to a unique identicon
        
        const link = document.createElement('a');
        link.href = `https://njump.me/${npub}`;
        link.target = '_blank';
        link.className = 'profile-link';
        
        const nameSpan = document.createElement('span');
        nameSpan.textContent = finalDisplayName + ':';
        link.appendChild(nameSpan);
        
        const satsAmount = document.createElement('span');
        satsAmount.className = 'sats-amount';
        satsAmount.textContent = ` ${zapper.totalSats.toLocaleString()} Sats`;

        li.appendChild(img);
        li.appendChild(link);
        li.appendChild(satsAmount);
        
        zapperList.appendChild(li);
    });

    const totalSumEl = document.createElement('div');
    totalSumEl.className = 'total-sats-summary';
    totalSumEl.innerHTML = `<strong>Total:</strong> ${totalSats.toLocaleString()} Sats`;
    listFooter.appendChild(totalSumEl);

    if (oldestTimestamp) {
        const date = new Date(oldestTimestamp * 1000);
        const dateString = date.toLocaleDateString('en-US', { day: '2-digit', month: '2-digit', year: 'numeric' });
        
        const note = document.createElement('p');
        note.textContent = `Zaps included since ${dateString}.`;
        note.className = 'list-footer-note';
        listFooter.appendChild(note);
    }
    
    showShareButtons();
}

export function displayRelayStatus(relayStatus) {
    const container = document.getElementById('relay-status-container');
    const list = document.getElementById('relay-status-list');
    if (!container || !list) return;

    list.innerHTML = ''; // Clear previous status

    if (!relayStatus || relayStatus.length === 0) {
        container.style.display = 'none';
        return;
    }

    container.style.display = 'block';
    
    // Sort relays: connected first, then by name
    relayStatus.sort((a, b) => {
        if (a.status === 'connected' && b.status !== 'connected') return -1;
        if (a.status !== 'connected' && b.status === 'connected') return 1;
        return a.url.localeCompare(b.url);
    });

    relayStatus.forEach(relay => {
        const item = document.createElement('li');
        item.className = 'relay-status-item';

        const indicator = document.createElement('span');
        indicator.className = `relay-status-indicator ${relay.status}`;
        
        const url = document.createElement('span');
        url.className = 'relay-url';
        url.textContent = relay.url;

        item.appendChild(indicator);
        item.appendChild(url);
        list.appendChild(item);
    });
}
